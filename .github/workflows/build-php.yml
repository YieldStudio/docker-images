name: Build PHP Docker Image

on:
  push:
    branches:
      - main
    paths:
      - php/**
  pull_request:
    branches:
      - main
    paths:
      - php/**


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: yieldstudio/php

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.set.outputs.php_versions }}
      type: ${{ steps.set.outputs.type }}
      dockerfile: ${{ steps.set.outputs.dockerfile }}
    steps:
      - name: Set PHP versions
        id: set
        run: |
          echo 'php_versions=["8.2","8.3","8.4"]' >> $GITHUB_OUTPUT
          echo 'type=["unit"]' >> $GITHUB_OUTPUT
          echo 'dockerfile=["unit.Dockerfile"]' >> $GITHUB_OUTPUT

  build:
    needs: matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      NODE_VERSION: '22'
    strategy:
      matrix: 
        php_version: ${{ fromJSON(needs.matrix.outputs.php_versions) }}
        type: ${{ fromJSON(needs.matrix.outputs.type) }}
        dockerfile: ${{ fromJSON(needs.matrix.outputs.dockerfile) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,prefix=${{ matrix.php_version }}-${{ matrix.type }}-
            type=ref,event=tag,prefix=${{ matrix.php_version }}-${{ matrix.type }}-v
            type=sha,prefix=${{ matrix.php_version }}-${{ matrix.type }}-
            type=raw,${{ matrix.php_version }}-${{ matrix.type }}

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: ./php
          file: ./php/${{ matrix.dockerfile }}
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
            NODE_VERSION=${{ env.NODE_VERSION }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=php-${{ matrix.php_version }}-${{ matrix.type }}
          cache-to: type=gha,scope=php-${{ matrix.php_version }}-${{ matrix.type }},mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-${{ matrix.type }}
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
  scan:
    if: github.event_name != 'pull_request'
    needs: 
      - matrix
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        php_version: ${{ fromJSON(needs.matrix.outputs.php_versions) }}
        type: ${{ fromJSON(needs.matrix.outputs.type) }}
        dockerfile: ${{ fromJSON(needs.matrix.outputs.dockerfile) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get Short SHA
        id: get_short_sha
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-${{ matrix.type }}-${{ env.SHORT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      

